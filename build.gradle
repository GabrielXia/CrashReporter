apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

import java.text.SimpleDateFormat;

def env = System.getenv()
def versionInfoFile = new File(sourceSets.main.output.resourcesDir, 'versionInfo.properties')

group = 'org.terasology'

// We use both Maven Central and our own Artifactory instance, which contains module builds, extra libs, and so on
repositories {
    mavenCentral()
    maven {
        url "http://artifactory.terasology.org:8081/artifactory/repo"
    }
}

dependencies {
	compile group: 'brianbb', name: 'jpastebin', version: '1.0.0'
	
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
	testCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'
	
	testRuntime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

def convertGitBranch = { gitBranch ->
    // Remove "origin/" from "origin/develop"
    return gitBranch ? gitBranch.substring(gitBranch.lastIndexOf("/") + 1) : null
}

task createVersionInfoFile {

    doLast {
        logger.lifecycle("Creating $versionInfoFile")

        ant.propertyfile(file: versionInfoFile) {
            ant.entry(key: 'buildNumber', value: env.BUILD_NUMBER)
            ant.entry(key: 'buildId', value: env.BUILD_ID)
            ant.entry(key: 'buildTag', value: env.BUILD_TAG)
            ant.entry(key: 'buildUrl', value: env.BUILD_URL)
            ant.entry(key: 'jobName', value: env.JOB_NAME)
            ant.entry(key: 'gitBranch', value: convertGitBranch(env.GIT_BRANCH))
            ant.entry(key: 'gitCommit', value: env.GIT_COMMIT)
            ant.entry(key: 'displayVersion', value: version)
        }
    }
}

jar.dependsOn createVersionInfoFile


task sourceJar(type: Jar) {
    description = "Create a JAR with all sources"
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Create a JAR with the JavaDoc for the java sources"
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task runInteractiveTest(type: JavaExec, dependsOn: testClasses) {
    main = "org.terasology.crashreporter.InteractiveTestCases"
    classpath = files(sourceSets.test.runtimeClasspath)
	args = ['setupForExtraLongMessageException', 'src/test/resources/lengthy_logfile.log', 'en-US']
}

// Define the artifacts we want to publish (the .pom will also be included since the Maven plugin is active)
artifacts {
    archives sourceJar
    archives javadocJar
}
